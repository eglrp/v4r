v4r_add_module(
  DESCRIPTION "I/O"
  REQUIRED v4r_core v4r_common opencv boost
  PRIVATE_REQUIRED glog
  OPTIONAL eigen
  HEADERS
    cv.h
    eigen.h
    exceptions.h
    filesystem.h
    grabber.h
  SOURCES
    cv.cpp
    eigen.cpp
    filesystem.cpp
    grabber.cpp
    grabber_factory.cpp
)

v4r_add_submodule(
  "pcd_grabber"
  PRIVATE_REQUIRED pcl
  HEADERS pcd_grabber.h
  SOURCES pcd_grabber.cpp
  EXPORTS "v4r::io::PCDGrabber"
)

v4r_add_submodule(
  "openni2_grabber"
  PRIVATE_REQUIRED openni2
  HEADERS openni2_grabber.h
  SOURCES openni2_grabber.cpp
  EXPORTS "v4r::io::OpenNI2Grabber"
)

v4r_add_submodule(
  "structure_core_grabber"
  PRIVATE_REQUIRED structurecore
  HEADERS structure_core_grabber.h
  SOURCES structure_core_grabber.cpp
  EXPORTS "v4r::io::StructureCoreGrabber"
)

v4r_add_submodule(
  "realsense2_grabber"
  PRIVATE_REQUIRED realsense2::realsense2
  HEADERS realsense2_grabber.h
  SOURCES realsense2_grabber.cpp
  EXPORTS "v4r::io::RealSense2Grabber"
)

# Until Occipital provides StructureCore libraries with position independent code...
if(WITH_STRUCTURECORE AND BUILD_v4r_io_structure_core_grabber AND BUILD_SHARED_LIBS)
  message(FATAL_ERROR "StructureCore grabber requires linking against a library compiled without \
-fPIC (libStructureCore.a). Consequently, it can not be built into shared \
library v4r_io. Either disable this grabber or switch to static build \
(BUILD_SHARED_LIBS=OFF)")
endif()

# The code below in concerned with autogeneration of "grabber_factory_autogenerated.cpp".
# The file contains includes for each enabled grabber, as well as a macro sequence with the class names of the enabled
# grabbers. This script assumes that all submodules are grabbers, that headers are named after submodule name, and that
# submodules have EXPORTS property set to the fully qualified name of the corresponding grabber.
foreach(s ${V4R_MODULE_v4r_io_SUBMODULES})
  if(HAVE_${s})
    set(name ${V4R_SUBMODULE_${s}_NAME})
    set(class ${V4R_SUBMODULE_${s}_EXPORTS})
    set(INCLUDE_ALL_GRABBERS "${INCLUDE_ALL_GRABBERS}#include <v4r/io/${name}.h>\n")
    set(LIST_ALL_GRABBERS "${LIST_ALL_GRABBERS}(${class})")
  endif()
endforeach()
configure_file(src/grabber_factory_autogenerated.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/grabber_factory_autogenerated.cpp)
